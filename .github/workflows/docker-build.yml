name: Docker 镜像构建与发布

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: 'latest'
      description:
        description: '构建描述'
        required: false
        default: '手动触发的构建'

jobs:
  # 为每个平台单独构建镜像
  build-per-platform:
    name: 构建 ${{ matrix.platform }} 平台镜像
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 即使一个平台失败，也继续构建其他平台
      max-parallel: 2   # 限制并行运行的作业数量，只有两个架构
      matrix:
        include:
          - platform: linux/amd64
            timeout: 30
          - platform: linux/arm64
            timeout: 60

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 提取平台名称作为标签后缀
      - name: 提取平台后缀
        id: platform_suffix
        run: |
          SUFFIX=$(echo "${{ matrix.platform }}" | sed 's/linux\///' | sed 's/\//-/')
          echo "suffix=$SUFFIX" >> $GITHUB_OUTPUT

      # 使用手动输入的版本信息
      - name: 提取版本信息
        id: version_info
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ "$VERSION" == "latest" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "tag_suffix=" >> $GITHUB_OUTPUT
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_suffix=-$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "使用版本: $VERSION"

      # 构建并推送单平台镜像
      # 设置构建缓存
      - name: 设置 Docker Buildx 缓存
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform }}-
            ${{ runner.os }}-buildx-

      # 列出工作目录内容（调试用）
      - name: 列出工作目录内容
        run: |
          echo "当前工作目录: $(pwd)"
          ls -la

      # 创建 requirements.txt 文件
      - name: 创建 requirements.txt 文件
        run: |
          echo "创建 requirements.txt 文件..."
          cat > requirements.txt << 'EOL'
          python-dotenv>=1.0.0
          pyyaml>=6.0
          requests>=2.28.2
          pytz>=2023.3
          schedule>=1.2.0

          # LLM支持
          openai>=1.0.0

          # Twitter支持
          tweety-ns>=0.9.0

          # Web应用
          Flask>=2.3.0
          Flask-SQLAlchemy>=3.0.0
          Werkzeug>=2.3.0

          # 系统监控
          psutil>=5.9.0

          # 推送通知
          apprise>=1.9.0

          # SOCKS代理支持
          httpx[socks]>=0.24.0
          EOL

          echo "requirements.txt 文件已创建:"
          cat requirements.txt

      # 创建docker-entrypoint.sh脚本
      - name: 创建docker-entrypoint.sh脚本
        run: |
          echo "创建docker-entrypoint.sh脚本..."
          cat > docker-entrypoint.sh << 'EOL'
          #!/bin/bash
          set -e

          # 设置颜色
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          RED='\033[0;31m'
          NC='\033[0m' # No Color

          echo -e "${GREEN}===== TweetAnalyst应用启动脚本 =====${NC}"

          # 创建必要的目录
          echo -e "${GREEN}创建必要的目录...${NC}"
          mkdir -p /data /data/logs
          chmod -R 755 /data

          # 检查SOCKS代理支持
          if [[ -n "$HTTP_PROXY" && "$HTTP_PROXY" == socks* ]] || [[ -n "$HTTPS_PROXY" && "$HTTPS_PROXY" == socks* ]]; then
              echo -e "${YELLOW}检测到SOCKS代理，确保安装了必要的支持...${NC}"
              pip install --no-cache-dir httpx[socks] socksio
          fi

          # 检查依赖
          echo -e "${GREEN}检查依赖...${NC}"
          python -c "import tweety" || pip install --no-cache-dir tweety-ns
          python -c "import flask" || pip install --no-cache-dir Flask
          python -c "import flask_sqlalchemy" || pip install --no-cache-dir Flask-SQLAlchemy
          python -c "import openai" || pip install --no-cache-dir openai
          python -c "import psutil" || pip install --no-cache-dir psutil
          python -c "import apprise" || pip install --no-cache-dir apprise

          # 设置默认LLM API
          if [ -z "$LLM_API_BASE" ]; then
              echo -e "${YELLOW}未设置LLM_API_BASE，使用默认值: https://api.x.ai/v1${NC}"
              export LLM_API_BASE="https://api.x.ai/v1"
          fi

          if [ -z "$LLM_API_MODEL" ]; then
              echo -e "${YELLOW}未设置LLM_API_MODEL，使用默认值: grok-2-latest${NC}"
              export LLM_API_MODEL="grok-2-latest"
          fi

          # 启动应用
          echo -e "${GREEN}启动应用...${NC}"
          exec python run_all.py
          EOL
          chmod +x docker-entrypoint.sh
          echo "docker-entrypoint.sh脚本已创建"

      # 创建临时构建目录
      - name: 创建临时构建目录
        run: |
          mkdir -p /tmp/build
          cp -r . /tmp/build/
          ls -la /tmp/build/
          echo "检查临时目录中的 requirements.txt 文件"
          if [ -f "/tmp/build/requirements.txt" ]; then
            echo "临时目录中 requirements.txt 存在"
            cat /tmp/build/requirements.txt | head -5
          else
            echo "临时目录中 requirements.txt 不存在！"
            # 复制刚刚创建的 requirements.txt 文件
            cp requirements.txt /tmp/build/
            echo "已复制 requirements.txt 到临时目录"
            cat /tmp/build/requirements.txt | head -5
          fi

          # 确保docker-entrypoint.sh脚本存在并有执行权限
          if [ -f "/tmp/build/docker-entrypoint.sh" ]; then
            echo "临时目录中 docker-entrypoint.sh 存在"
            chmod +x /tmp/build/docker-entrypoint.sh
          else
            echo "临时目录中 docker-entrypoint.sh 不存在！"
            # 复制刚刚创建的 docker-entrypoint.sh 文件
            cp docker-entrypoint.sh /tmp/build/
            chmod +x /tmp/build/docker-entrypoint.sh
            echo "已复制 docker-entrypoint.sh 到临时目录"
          fi

      # 构建并推送
      - name: 构建并推送 Docker 镜像
        timeout-minutes: ${{ matrix.timeout }}
        uses: docker/build-push-action@v5
        with:
          context: /tmp/build
          file: /tmp/build/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${{ steps.platform_suffix.outputs.suffix }}${{ steps.version_info.outputs.tag_suffix }}
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max
            type=local,dest=/tmp/.buildx-cache-new,mode=max
          # 优化构建参数
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760
            BUILDKIT_STEP_LOG_MAX_SPEED=10485760
            BUILDKIT_PROGRESS=plain
          # 启用并行构建
          provenance: false
          sbom: false

      # 移动缓存以避免缓存增长问题
      - name: 移动构建缓存
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # 创建多架构清单
  create-manifest:
    name: 创建多架构清单
    needs: build-per-platform
    runs-on: ubuntu-latest
    # 手动触发时总是执行

    steps:
      - name: 登录 DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 使用手动输入的版本信息
      - name: 提取版本信息
        id: version_info
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ "$VERSION" == "latest" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "tag_suffix=" >> $GITHUB_OUTPUT
            echo "tags=${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest" >> $GITHUB_OUTPUT
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_suffix=-$VERSION" >> $GITHUB_OUTPUT
            echo "tags=${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:$VERSION,${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest" >> $GITHUB_OUTPUT
          fi
          echo "使用版本: $VERSION"

      # 创建并推送多架构清单
      - name: 创建并推送多架构清单
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          DOCKER_CLI_EXPERIMENTAL=enabled

          # 创建并推送多架构清单
          docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:amd64${{ steps.version_info.outputs.tag_suffix }} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }}

          # 添加架构注释
          docker manifest annotate ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }} --arch arm64

          # 推送清单
          docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION}

          # 如果是发布版本，也更新 latest 标签
          if [[ "$VERSION" != "latest" ]]; then
            docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:amd64${{ steps.version_info.outputs.tag_suffix }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }}

            docker manifest annotate ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }} --arch arm64

            docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest
          fi
