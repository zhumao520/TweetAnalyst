name: Docker Build and Push

on:
  workflow_dispatch:  # 只允许手动触发
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: true
        default: 'latest'
      description:
        description: '构建描述'
        required: false
        default: '手动触发的构建'

jobs:
  # 为每个平台单独构建镜像
  build-per-platform:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # 即使一个平台失败，也继续构建其他平台
      max-parallel: 2   # 限制并行运行的作业数量，只有两个架构
      matrix:
        include:
          - platform: linux/amd64
            timeout: 30
          - platform: linux/arm64
            timeout: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 提取平台名称作为标签后缀
      - name: Extract platform suffix
        id: platform_suffix
        run: |
          SUFFIX=$(echo "${{ matrix.platform }}" | sed 's/linux\///' | sed 's/\//-/')
          echo "suffix=$SUFFIX" >> $GITHUB_OUTPUT

      # 使用手动输入的版本信息
      - name: Extract version info
        id: version_info
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ "$VERSION" == "latest" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "tag_suffix=" >> $GITHUB_OUTPUT
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_suffix=-$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "使用版本: $VERSION"

      # 构建并推送单平台镜像
      # 设置构建缓存
      - name: Set up Docker Buildx cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.platform }}-
            ${{ runner.os }}-buildx-

      # 列出工作目录内容（调试用）
      - name: List directory contents
        run: ls -la

      # 确认 requirements.txt 存在
      - name: Check requirements.txt
        run: |
          if [ -f "requirements.txt" ]; then
            echo "requirements.txt exists"
            cat requirements.txt | head -5
          else
            echo "requirements.txt does not exist!"
            exit 1
          fi

      # 创建临时构建目录
      - name: Create build directory
        run: |
          mkdir -p /tmp/build
          cp -r . /tmp/build/
          ls -la /tmp/build/
          echo "检查临时目录中的 requirements.txt 文件"
          if [ -f "/tmp/build/requirements.txt" ]; then
            echo "临时目录中 requirements.txt 存在"
            cat /tmp/build/requirements.txt | head -5
          else
            echo "临时目录中 requirements.txt 不存在！"
            # 手动创建一个基本的 requirements.txt 文件
            echo "python-dotenv>=1.0.0" > /tmp/build/requirements.txt
            echo "pyyaml>=6.0" >> /tmp/build/requirements.txt
            echo "langchain-openai>=0.0.1" >> /tmp/build/requirements.txt
            echo "langchain-core>=0.1.0" >> /tmp/build/requirements.txt
            echo "requests>=2.28.2" >> /tmp/build/requirements.txt
            echo "手动创建的 requirements.txt:"
            cat /tmp/build/requirements.txt
          fi

      # 构建并推送
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: /tmp/build
          file: /tmp/build/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${{ steps.platform_suffix.outputs.suffix }}${{ steps.version_info.outputs.tag_suffix }}
          platforms: ${{ matrix.platform }}
          cache-from: |
            type=gha
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max
            type=local,dest=/tmp/.buildx-cache-new,mode=max
          # 优化构建参数
          build-args: |
            BUILDKIT_STEP_LOG_MAX_SIZE=10485760
            BUILDKIT_STEP_LOG_MAX_SPEED=10485760
            BUILDKIT_PROGRESS=plain
          # 启用并行构建
          provenance: false
          sbom: false
          # 使用 BuildKit 并行构建
          builder-pool-size: 4
          timeout-minutes: ${{ matrix.timeout }}

      # 移动缓存以避免缓存增长问题
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # 创建多架构清单
  create-manifest:
    name: Create multi-arch manifest
    needs: build-per-platform
    runs-on: ubuntu-latest
    # 手动触发时总是执行

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 使用手动输入的版本信息
      - name: Extract version info
        id: version_info
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if [[ "$VERSION" == "latest" ]]; then
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "tag_suffix=" >> $GITHUB_OUTPUT
            echo "tags=${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest" >> $GITHUB_OUTPUT
          else
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_suffix=-$VERSION" >> $GITHUB_OUTPUT
            echo "tags=${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:$VERSION,${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest" >> $GITHUB_OUTPUT
          fi
          echo "使用版本: $VERSION"

      # 创建并推送多架构清单
      - name: Create and push manifest
        run: |
          VERSION="${{ steps.version_info.outputs.version }}"
          DOCKER_CLI_EXPERIMENTAL=enabled

          # 创建并推送多架构清单
          docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:amd64${{ steps.version_info.outputs.tag_suffix }} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }}

          # 添加架构注释
          docker manifest annotate ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION} \
            ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }} --arch arm64

          # 推送清单
          docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:${VERSION}

          # 如果是发布版本，也更新 latest 标签
          if [[ "$VERSION" != "latest" ]]; then
            docker manifest create ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:amd64${{ steps.version_info.outputs.tag_suffix }} \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }}

            docker manifest annotate ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest \
              ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:arm64${{ steps.version_info.outputs.tag_suffix }} --arch arm64

            docker manifest push ${{ secrets.DOCKER_HUB_USERNAME }}/tweetanalyst:latest
          fi
